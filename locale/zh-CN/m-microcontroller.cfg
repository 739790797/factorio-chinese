[entity-name]
microcontroller=微控制器
microcontroller-ram=内存模块

[entity-description]
microcontroller=使用 FAL（Factorio 汇编语言）编程逻辑并像专业人士一样处理信号。
microcontroller-ram=微控制器可以读取和写入的模块。靠近微控制器放置。

[item-name]
microcontroller=微控制器

[virtual-signal-name]
signal-mc-halt=停止信号
signal-mc-run=运行信号
signal-mc-step=步进信号
signal-mc-sleep=睡眠信号
signal-mc-jump=跳跃信号

[mod-description]
##m-microcontroller=program circuit network logic using FAL, a Factorio Assembly Language.\nAuthor: Luke Perkin. Modified by ZwerOxotnik and by contributors

[mod-name]
##m-microcontroller=MicroController

[mod-setting-name]
mc_update_tick_time=更新滴答时间

[mod-setting-description]
mc_update_tick_time=微控制器每第 N 个滴答执行一个动作

[technology-name]
microcontroller=微控制器

[microcontroller]
wiki=FAL 的紧凑 wiki
syntax=句法
example=例子
hover-text-hint=将鼠标悬停在文本上以查看工具提示
doc.overview=概述
doc.overview_description=Factorio 汇编语言是自动化制造的未来。专为大型工厂设计。 Factorio 汇编语言有多个操作码，而 MicroController（Factorio MicroController Unit）可以存储 32 条指令。微控制器有 4 个内部读/写寄存器和 4 个只读寄存器。
doc.glossary=词汇表
doc.glossary_description=
doc.basic_instructions_set=基本指令集
doc.basic_instructions_set_description=
doc.arithmetic_instructions=算术指令
doc.arithmetic_instructions_description=
doc.test_instructions=测试说明
doc.test_instructions_description=如果测试成功，测试指令将跳过下一条指令。
doc.blocking_instructions=阻塞指令
doc.blocking_instructions_description=阻塞指令将暂停程序直到操作完成
doc.interrupt_signals=中断信号
doc.interrupt_signals_description=有 5 种特殊信号可用于中断程序。\n当微控制器在其绿线或红线输入端接收到中断信号时，我将立即执行中断。
doc.old-help-text=上一个帮助文本
doc.old-help-text_description=
doc.pointers=指针
doc.pointers_description=当指定内存地址作为指令的参数时，您还可以传递内存指针。指针是一个特殊地址，在运行时计算文字地址。\n\n通常，内存地址采用 memN 的形式。这指示微控制器访问第一个寄存器。一个指针从 MEM@1 获取。这指示微控制器读取寄存器 1 的值，然后读取寄存器 N 的值，其中 N 是寄存器 1 的值。
doc.example_programs=示例程序
doc.example_programs_description=
topics.registers=[color=yellow]0.1[/color] 寄存器
topics.registers_description=微控制器有 4 个内部读写寄存器：\nmem1 mem2 mem3 mem4\n\n它还有 4 个只读寄存器：\nmem5 或 ipt：指令指针索引。\nmem6 或 cnr：红线输入上的信号数。 \nmem7 或 cng：绿线输入上的信号数。\nmem8 或 clk：单调时钟。
topics.mapped-memory=[color=yellow]0.2[/color] 映射内存
topics.mapped-memory_description=微控制器可以通过 RAM 模块进行扩展。微控制器有 4 个外部存储器端口：\n北端口 01 映射到 MEM11-14。\n南端口 01 映射到 MEM21-42。\n北端口 02 映射到 MEM31-34。\n南端口 02 映射到 MEM41- 44.\n您还可以将外部微控制器连接到南北端口 01。
topics.signal_glossary=[color=yellow]1.1[/color] 信号
topics.signal_glossary_description=一个类型和一个有符号整数值。
topics.type_glossary=[color=yellow]1.2[/color] 类型
topics.type_glossary_description=每个信号都包含一个类型。该类型可以是指您的工厂消费或生产的物品，也可以是“虚拟”类型。
topics.value_glossary=[color=yellow]1.3[/color] 值
topics.value_glossary_description=信号的整数部分。
topics.move_glossary=[color=yellow]1.4[/color] 移动
topics.move_glossary_description=将信号从一个寄存器复制到另一个。
topics.set_glossary=[color=yellow]1.5[/color] 设置
topics.set_glossary_description=将信号的值设置为另一个值。
topics.register_glossary=[color=yellow]1.6[/color] 注册
topics.register_glossary_description=寄存器 可以存储一个信号的内存单元。
topics.clear_glossary=[color=yellow]1.7[/color] 透明
topics.clear_glossary_description=将寄存器重置为 NULL。
topics.null_glossary=[color=yellow]1.8[/color] NULL
topics.null_glossary_description=值为 0 的虚拟黑信号。
topics.label_glossary=[color=yellow]1.9[/color] 标签
topics.label_glossary_description=用于跳转的文本标识符。
topics.description_BIS=每个微控制器在第 N 个滴答声中只能读取一条指令。（可定制）
topics.description_BIS_description=60 滴答声 ~= 1 秒
topics.comments_BIS=[color=yellow]2.1[/color] 评论
topics.comments_BIS_description=评论后的所有文字
topics.labels_BIS=[color=yellow]2.2[/color] 标签
topics.labels_BIS_description=标签用作跳转指令的标识符。\n标签是一个冒号后跟文本。\n在跳转指令中使用标签时，还必须包含冒号。
topics.NOP_BIS=[color=yellow]2.3[/color] NOP
topics.NOP_BIS_description=NOP 代表无操作。它对内部寄存器的状态没有影响。\n微控制器仍然需要 N 个滴答来读取 NOP 指令。
topics.MOV_BIS=[color=yellow]2.4[/color] MOV
topics.MOV_BIS_description=接收信号<SRC>并将其写给所有人<DST>寄存器。
topics.SET_BIS=[color=yellow]2.5[/color] 设置
topics.SET_BIS_description=取值为<SRC>并将其写入<DST>
topics.SWP_BIS=[color=yellow]2.6[/color] SWP
topics.SWP_BIS_description=交换信号<SRC>和<DST>.
topics.CLR_BIS=[color=yellow]2.7[/color] CLR
topics.CLR_BIS_description=将 NULL 写入所有<DST>寄存器。
topics.FIG_BIS=[color=yellow]2.8[/color] 在绿色中查找
topics.FIG_BIS_description=在信号类型等于信号类型的绿线输入中查找信号<SRC>.\n如果找到信号，则将其写入 memN。
topics.FIR_BIS=[color=yellow]2.9[/color] 查找红色
topics.FIR_BIS_description=在红线输入中查找信号类型等于<SRC>.\n如果找到信号，则将其写入 memN。
topics.JMP_BIS=[color=yellow]2.10[/color] JMP
topics.JMP_BIS_description=将指令指针跳转到<SRC>.\n如果<SRC>是文字整数，指令指针跳转到该行。\n如果<SRC>是一个寄存器，指令指针跳转到第 N 行，其中 N 是寄存器的值。\n如果<SRC>是一个标签，指令指针跳转到该标签的第一个声明。
topics.HLT_BIS=[color=yellow]2.11[/color] HLT
topics.HLT_BIS_description=暂停程序
topics.ADD_AI=[color=yellow]3.1[/color] 添加
topics.ADD_AI_description=将值添加到<SRC>价值在<DST>并将结果写入 memN。
topics.SUB_AI=[color=yellow]3.2[/color] SUB
topics.SUB_AI_description=减去值<DST>从价值<SRC>并将结果写入 memN。
topics.MUL_AI=[color=yellow]3.3[/color] MUL
topics.MUL_AI_description=乘以价值<SRC>由价值在<DST>并将结果写入 memN。
topics.DIV_AI=[color=yellow]3.4[/color] DIV
topics.DIV_AI_description=将值除以<SRC>由价值在<DST>并将结果写入 memN。
topics.MOD_AI=[颜色=黄色]3.5[/颜色] MOD
topics.MOD_AI_description=执行<SRC>模数<DST>并将结果写入 memN。
topics.POW_AI=[color=yellow]3.6[/color] POW
topics.POW_AI_description=加注<SRC>的力量<DST>并将结果写入 memN。\n[color=yellow]算术指令忽略信号类型。[/color]
topics.DIG_AI=[color=yellow]3.7[/color] 挖
topics.DIG_AI_description=读取位置的数字<SRC>从 memN 并将结果写入 memN。
topics.DIS_AI=[color=yellow]3.8[/color] DIS
topics.DIS_AI_description=写<DST>到位置的数字<SRC>在 memN 中。\n如果<DST>长度超过 1 位，它写入第 1 位。
topics.BND_AI=[color=yellow]3.9[/color] BITWISE AND
topics.BND_AI_description=执行<SRC>和<DST>然后将结果写入 memN。
topics.BOR_AI=[color=yellow]3.10[/color] BITWISE OR
topics.BOR_AI_description=执行<SRC>要么<DST>然后将结果写入 memN。
topics.BXR_AI=[color=yellow]3.11[/color] BITWISE XOR
topics.BXR_AI_description=执行<SRC>异或<DST>然后将结果写入 memN。
topics.BND2_AI=[color=yellow]3.12[/color] BITWISE NOT
topics.BND2_AI_description=不执行<SRC>然后将结果写入 memN。
topics.BLS_AI=[color=yellow]3.13[/color] BITWISE 左移
topics.BLS_AI_description=移入位<SRC>经过<DST>向左，然后将结果写入 memN。
topics.BRS_AI=[color=yellow]3.14[/color] BITWISE RIGHT SHIFT
topics.BRS_AI_description=移入位<SRC>经过<DST>向右，然后将结果写入 memN。
topics.BLR_AI=[color=yellow]3.15[/color] 向左旋转
topics.BLR_AI_description=旋转位<SRC>经过<DST>向左，然后将结果写入 memN
topics.BRR_AI=[color=yellow]3.16[/color] BITWISE RIGHT ROTATE
topics.BRR_AI_description=旋转位<SRC>经过<DST>向右，然后将结果写入 memN。
topics.TGT_TI=[color=yellow]4.1[/color] 测试大于
topics.TGT_TI_description=测试是否<SRC>值大于<DST>价值。
topics.TLT_TI=[color=yellow]4.2[/color] 测试少于
topics.TLT_TI_description=测试是否<SRC>值小于<DST>价值。
topics.TEQ_TI=[color=yellow]4.3[/color] 测试等于
topics.TEQ_TI_description=测试是否<SRC>值等于<DST>价值
topics.TTE_TI=[color=yellow]4.4[/color] 测试类型相等
topics.TTE_TI_description=测试是否<SRC>类型等于<DST>类型。
topics.TTN_TI=[color=yellow]4.5[/color] 测试类型不相等
topics.TTN_TI_description=测试是否<SRC>类型不等于<DST>类型。
topics.SLP_BI=[color=yellow]5.1[/color] SLP
topics.SLP_BI_description=程序将休眠<SRC>蜱。
topics.BKR_BI=[color=yellow]5.2[/color] BKR
topics.BKR_BI_description=暂停程序，直到至少有<SRC>红线输入上的信号。
topics.BKG_BI=[color=yellow]5.3[/color] BKG
topics.BKG_BI_description=暂停程序，直到至少有<SRC>绿线输入上的信号。
topics.SYN_BI=[color=yellow]5.4[/color] SYN
topics.SYN_BI_description=暂停程序，直到所有其他连接的微控制器调用 SYN。
topics.HLT_IS=[color=yellow]6.1[/color] HLT
topics.HLT_IS_description=暂停程序
topics.RUN_IS=[color=yellow]6.2[/color] 运行
topics.RUN_IS_description=运行程序
topics.STP_IS=[color=yellow]6.3[/color] STP
topics.STP_IS_description=单步执行程序（执行当前指令然后暂停）。
topics.SLP_IS=[color=yellow]6.4[/color] SLP
topics.SLP_IS_description=程序将休眠 N 个刻度，其中 N 是信号值。
topics.JMP_IS=[color=yellow]6.5[/color] JMP
topics.JMP_IS_description=将程序指令指针跳转到 N，其中 N 是信号的值。
topics.MEM_pointer=[color=yellow]7.1[/color] MEM@N
topics.MEM_pointer_description=访问寄存器 X，其中 X 是寄存器 N 的值。
topics.RED_pointer=[color=yellow]7.2[/color] RED@N
topics.RED_pointer_description=访问红线输入 X，其中 X 是寄存器 N 的值。
topics.GREEN_pointer=[color=yellow]7.3[/color] GREEN@N
topics.GREEN_pointer_description=访问绿线输入 X，其中 X 是寄存器 N 的值。
topics.MULTIPLY_INPUT_EP=[color=yellow]8.1[/color] 乘法输入
topics.MULTIPLY_INPUT_EP_description=该程序采用第一个红线输入，将其加倍并输出结果。
topics.ACCUMULATE_INPUT_EP=[color=yellow]8.2[/color] 累积输入
topics.ACCUMULATE_INPUT_EP_description=该程序获取红线输入上的前 4 个信号，并随着时间的推移累积它们。\n它需要位于北端口 01 的 RAM 模块。
